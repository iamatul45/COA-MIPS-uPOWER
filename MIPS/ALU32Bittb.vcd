$date
	Tue Jun  2 15:32:25 2020
$end
$version
	Icarus Verilog
$end
$timescale
	1ns
$end
$scope module alu32bittb $end
$var wire 1 ! sig_branch $end
$var wire 32 " ALU_result [31:0] $end
$var reg 6 # funct [5:0] $end
$var reg 16 $ immediate [15:0] $end
$var reg 6 % opcode [5:0] $end
$var reg 32 & rs_content [31:0] $end
$var reg 32 ' rt_content [31:0] $end
$var reg 5 ( shamt [4:0] $end
$scope module testerboi $end
$var wire 6 ) funct [5:0] $end
$var wire 16 * immediate [15:0] $end
$var wire 6 + opcode [5:0] $end
$var wire 32 , rs_content [31:0] $end
$var wire 32 - rt_content [31:0] $end
$var wire 5 . shamt [4:0] $end
$var reg 32 / ALU_result [31:0] $end
$var reg 1 ! sig_branch $end
$var reg 32 0 signExtend [31:0] $end
$var reg 32 1 signed_rs [31:0] $end
$var reg 32 2 signed_rt [31:0] $end
$var reg 32 3 temp [31:0] $end
$var reg 32 4 zeroExtend [31:0] $end
$var integer 32 5 i [31:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx 5
bx 4
bx 3
b11111111111111111111111111110110 2
b1100 1
bx 0
b10 /
b0 .
b11111111111111111111111111110110 -
b1100 ,
b0 +
b10100 *
b100000 )
b0 (
b11111111111111111111111111110110 '
b1100 &
b0 %
b10100 $
b100000 #
b10 "
x!
$end
#10
b11111111111111111111111111111110 "
b11111111111111111111111111111110 /
b11 2
b1 1
b100010 #
b100010 )
b11 '
b11 -
b1 &
b1 ,
#20
b110100 "
b110100 /
b1101 2
b0 1
b10 (
b10 .
b0 #
b0 )
b1101 '
b1101 -
b0 &
b0 ,
#30
b10111101011 "
b10111101011 /
b10111011100 4
b10111011100 0
b0 2
b1111 1
b10111011100 $
b10111011100 *
b0 '
b0 -
b1111 &
b1111 ,
b1000 %
b1000 +
#40
b10000000111 "
b10000000111 /
b10000000000 4
b10000000000 0
b111 1
b10000000000 $
b10000000000 *
b111 &
b111 ,
b10011 %
b10011 +
#50
b1111111000 "
b1111111000 /
b11111111111111111111111111111000 1
b11111111111111111111111111111000 &
b11111111111111111111111111111000 ,
b100011 %
b100011 +
#60
1!
b0 "
b0 /
b100 2
b100 1
b100 '
b100 -
b100 &
b100 ,
b100 %
b100 +
#70
0!
b11111111111111111111111111111111 "
b11111111111111111111111111111111 /
b101 2
b101 '
b101 -
#80
